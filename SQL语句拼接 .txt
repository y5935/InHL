       
***************************第1种情况（只有where）**********************************

 /**
	 * 查询指定数据表中记录的数量
	 * @param tableName	：表名
	 * @param filter	：查询条件（不需要使用where子句）
	 * @return			：记录行数
	 */
	public int getRows(String tableName, String filter){
		//编写SQL语句
		String sql = "select count(*) as total from " + tableName;
		
		//判断是否具有查询条件
		if(filter != null && !"".equals(filter.trim())){
			sql = sql + "where " + filter;
		}
		
		try {
			//初始化连接对象
			this.initStatement(sql);
			
			//执行SQL语句
			rs = ps.executeQuery();
			
			if(rs.next())
				return rs.getInt("total");
			else
				return 0;
			
		} catch (SQLException e) {
			throw new RuntimeException(e);
		}
		finally{
			close();
		}
	    }
==================================================================================
******************************第2种情况（既有where 又有and）**********************
/**
	 * 多条件查询（模糊查询）
	 * @param emp
	 * @return
	 */
	public List<Employee> getByExp(Employee emp){
		List<Object> list = new ArrayList<Object>();
		
		String sql = "select * from biz_emp_base where 1=1";
		
		System.out.println(emp.getEmpName() !=null);
		if(emp.getEmpName() !=null){
			sql += " and empName like ?";
			list.add("%"+emp.getEmpName()+"%");
		}
		
		if(emp.getDeptId() != 0){
			sql += " and deptId=?";
			list.add(emp.getDeptId());
		}
		
		return this.executeQuery(Employee.class, sql, list.toArray());
	}